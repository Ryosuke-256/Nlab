/JavaScriptを入れる位置はHTMLの<head>か<body>の最後。ただ読み込みの問題で<body>の最後に入れるのが最適。
/ラムダ式 (引数) =>{処理}とかく。

起動は作業ディレクトリで npm run dev

Viteの注意点
・プロジェクトを入れた後は npm install
・ファイル起動はnpm dev run
・弄っていいフォルダは src/ static/ だけ
・src/ 内は index.html, script.js, style.css だけ
・

座標の話
・webGL座標：x軸は右、y軸は上、z軸は後ろ
・window座標： x軸は右、y軸は下

複数のオブジェクトを同時にトランスフォームさせたいときはGroup

時間を表す関数はいくつかある
・グローバル秒数を測る Data.now()
・ファイルを起動してからの秒数を測る perfomance.now()
・関数を作ってからの秒数を測る Clock()

アニメーションライブラリはいっぱいある！(有名なのはGSAP?)

カメラ編
・カメラにはいろいろある！
・カメラコントロールも色々ある

loader
・第1引数：ファイルのパス
・第2引数：成功時のコールバック関数
・第3引数：進行状況を知らせるコールバック関数
・第4引数：エラーハンドリング関数

gltf
・プロジェクトファイル (=.blend)
・プロジェクトファイル内のtransform情報が引き継がれる

obj
・ModelFile
・console()で情報を見る
    ・ロード元やchildrenで様々な情報が見れるので、3Dモデルを弄る時はこれを参照
・新規オブジェクトとして読み込まれる

空のデータを宣言するときは const a = null

three-mesh-UI
・インストール
package.jsonに以下のように書く
"dependencies": {
    "lil-gui": "^0.19.0",
    "three": "^0.158.0",
    "three-mesh-ui": "^6.5.4"
  }

ライブラリを入れるときは
npm install --save newlibraly
そうするとpackage.jsonのdependenciesに書き込まれ、ついでにnpm installしてくれる


npm install
・Github
https://github.com/felixmariotto/three-mesh-ui

thre-mesh-uiが基本VR用なのでマウスでシミュレーションするときはそれ用のプログラムを組む!
ryacast()

array.reduce(callback)
・隣り合う２つの配列要素に対して左から右へ同時に関数を適用し、単一の値にする
・例：配列の中身を１つずつ足していって合計を求める
https://qiita.com/chihiro/items/1047e40514a778c08baa

UIインタラクションmemo
・UIパネルを作り、インタラクションによる状態変化を設定 three-mesh-ui
↓
・raycasterで選択点(カーソル)の情報と、カーソルに重なるオブジェクトの情報を得る raycaster()
↓
・カーソルが重なっているオブジェクトに与える処理をkey変数をトリガーに設定 (例：selectedState) if()
↓
・Eventlistenerで各処理に対してkey変数を変化、もしくは与える addEventlistener

onafterupdate
・Uiの更新後に呼ばれるcallback関数
・対象はtextやblocksなどなんでも

setInterval(関数,処理間隔(ミリs))
・第一引数の関数を第二引数の間隔で実行する

screenshot
Three.jsはレンダラーを標準装備しているのでhtml2canvasの必要がない
imgData = renderer.domElement.toDataURL()
これでok

一定間隔ごとに処理を行いたい場合
1.setTimeout(function,second)
呼び出されたあと一回だけfunctionを実行
2.setInterval(function,second)
呼び出されたたらずっとfunctionを実行
別途中断する必要がある
+α
ループの中でループとかやるときは非同期処理にした方がいい

非同期処理 async function
基本形
return new Promise(resolve => callback(resolve))
応用
await : 指定した関数のPromiseの結果が返されるまでasync function内の処理を一時停止する
結果が返されればasync function内の処理を再開する

Blobとは
・様々なタイプのデータを扱える
・Blobが作成された後、その内容を変更することはできない

配列取り扱い
・配列内のすべての要素に同じ処理を加えるとき
// 元の配列
const originalArray = [1, 2, 3, 4, 5];
// 各要素を2倍にする
const doubledArray = originalArray.map(element => element * 2);
+α 配列内配列
// 配列の配列
const arrayOfArrays = [[1, 2], [3, 4], [5, 6]];
// 各要素を2倍にする
const doubledArrayOfArrays = arrayOfArrays.map(innerArray => innerArray.map(element => element * 2));
array.map(callback) : 配列の要素一つずつに処理を行う


Group
const group = new THREE.Group()
・アニメーションの直前くらいで scene.add(group)
・各種アニメーション可能
group.children[0]
グループの中を抽出可能

webページを公開
・ターミナルでnpm run build
・vercelのインストール npm install -g vercel
・package.jsonのscriptに追加："deploy":"vercel --prod"
・npm run deploy
・Githubでlogin
・Set up and deploy "filename"? : yes
・Which scope do you want to deploy to? : なんでもいい
・Link to existing project? : no
・What’s your project’s name? : filename
・In which directory is your code located? : ./
・Want to modify these settings? : no
・完了
アップデート
・npm run deploy

GSAP memo
・アニメーションは本文に記述 (loopの中には書かない)

・プロパティはリアルタイムで更新されている

keydownは単押し判定から長押し判定になるまで0.5sの遅延がある

postprocessing
・import
import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';
or
import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
・initialization
const composer = new EffectComposer( renderer ) : composer内でエフェクトなどを混ぜる
const renderPass = new RenderPass( scene, camera )：元のレンダリング結果を格納
composer.addPass( renderPass ) : composerに元画像を追加

const glitchPass = new GlitchPass()：エフェクトを作成
composer.addPass( glitchPass )：composerにエフェクトを追加 
composerは追加した順に描画される→エフェクトは後

const outputPass = new OutputPass()：
composer.addPass( outputPass );

composer.render()：composerの結果をレンダリング(rendererに格納される)

postprocessing内の数値を変えるには
glitchPass.uniforms.~~.value



Eventlistenerトリガーアニメーション
・addEventlistener内ではやらない方がいい
  ・なんか発火してから0.5s程処理がされない時間がある
・addEventlistenerはあくまでフラグ管理用にしておくと〇
・なぜかgsapは普通に動く(非同期だから？)

htmlへのテキスト追加
const newParagraph = document.createElement('p');
const textNode = document.createTextNode('initial_text');
newParagraph.appendChild(textNode);
newParagraph.setAttribute('id', 'setting id');
document.body.appendChild(newParagraph); //テキストのbodyへの追加
書き換え
const myElement = document.getElementById('hdr_name');
myElement.textContent = hdr_url[index];


