/JavaScriptを入れる位置はHTMLの<head>か<body>の最後。ただ読み込みの問題で<body>の最後に入れるのが最適。
/ラムダ式 (引数) =>{処理}とかく。

起動は作業ディレクトリで npm run dev

Viteの注意点
・プロジェクトを入れた後は npm install
・ファイル起動はnpm dev run
・弄っていいフォルダは src/ static/ だけ
・src/ 内は index.html, script.js, style.css だけ
・

座標の話
・webGL座標：x軸は右、y軸は上、z軸は後ろ
・window座標： x軸は右、y軸は下

複数のオブジェクトを同時にトランスフォームさせたいときはGroup

時間を表す関数はいくつかある
・グローバル秒数を測る Data.now()
・ファイルを起動してからの秒数を測る perfomance.now()
・関数を作ってからの秒数を測る Clock()

アニメーションライブラリはいっぱいある！(有名なのはGSAP?)

カメラ編
・カメラにはいろいろある！
・カメラコントロールも色々ある

loader
・第1引数：ファイルのパス
・第2引数：成功時のコールバック関数
・第3引数：進行状況を知らせるコールバック関数
・第4引数：エラーハンドリング関数

gltf
・プロジェクトファイル (=.blend)
・プロジェクトファイル内のtransform情報が引き継がれる

obj
・ModelFile
・console()で情報を見る
    ・ロード元やchildrenで様々な情報が見れるので、3Dモデルを弄る時はこれを参照
・新規オブジェクトとして読み込まれる

空のデータを宣言するときは const a = null

three-mesh-UI
・インストール
package.jsonに以下のように書く
"dependencies": {
    "lil-gui": "^0.19.0",
    "three": "^0.158.0",
    "three-mesh-ui": "^6.5.4"
  }

npm install
・Github
https://github.com/felixmariotto/three-mesh-ui

thre-mesh-uiが基本VR用なのでマウスでシミュレーションするときはそれ用のプログラムを組む!
ryacast()

array.reduce(callback)
・隣り合う２つの配列要素に対して左から右へ同時に関数を適用し、単一の値にする
・例：配列の中身を１つずつ足していって合計を求める
https://qiita.com/chihiro/items/1047e40514a778c08baa

UIインタラクションmemo
・UIパネルを作り、インタラクションによる状態変化を設定 three-mesh-ui
↓
・raycasterで選択点(カーソル)の情報と、カーソルに重なるオブジェクトの情報を得る raycaster()
↓
・カーソルが重なっているオブジェクトに与える処理をkey変数をトリガーに設定 (例：selectedState) if()
↓
・Eventlistenerで各処理に対してkey変数を変化、もしくは与える addEventlistener

onafterupdate
・Uiの更新後に呼ばれるcallback関数
・対象はtextやblocksなどなんでも

setInterval(関数,処理間隔(ミリs))
・第一引数の関数を第二引数の間隔で実行する














